"""
Nose test for acp_times.py
"""

from acp_times import open_time, close_time

#Test for control distance of 0
def test_begin():
	assert open_time(0,200,"2017-01-01T00:00:00+00:00") == "2017-01-01T00:00:00+00:00"
	assert close_time(0,200,"2017-01-01T00:00:00+00:00") == "2017-01-01T01:00:00+00:00"

#Test for control distance larger than 120% brevet
def test_large_control():
	assert open_time(205,200,"2017-01-01T00:00:00+00:00") == "2017-01-01T05:53:00+00:00"
	assert close_time(205,200,"2017-01-01T00:00:00+00:00") == "2017-01-01T13:30:00+00:00"

#Test for max brevet times
def test_max_times():
	assert close_time(205,200,"2017-01-01T00:00:00+00:00") == "2017-01-01T13:30:00+00:00"
	assert close_time(305,300,"2017-01-01T00:00:00+00:00") == "2017-01-01T20:00:00+00:00"
	assert close_time(405,400,"2017-01-01T00:00:00+00:00") == "2017-01-02T03:00:00+00:00"
	assert close_time(605,600,"2017-01-01T00:00:00+00:00") == "2017-01-02T16:00:00+00:00"
	assert close_time(1005,1000,"2017-01-01T00:00:00+00:00") == "2017-01-04T03:00:00+00:00"

#Test example 1 in RUSA Brevet Control calculator page
def test_example_1():
	assert open_time(0,200,"2017-01-01T00:00:00+00:00") == "2017-01-01T00:00:00+00:00"
	assert close_time(0,200,"2017-01-01T00:00:00+00:00") == "2017-01-01T01:00:00+00:00"
	assert open_time(60,200,"2017-01-01T00:00:00+00:00") == "2017-01-01T01:46:00+00:00"
	assert close_time(60,200,"2017-01-01T00:00:00+00:00") == "2017-01-01T04:00:00+00:00"
	assert open_time(120,200,"2017-01-01T00:00:00+00:00") == "2017-01-01T03:32:00+00:00"
	assert close_time(120,200,"2017-01-01T00:00:00+00:00") == "2017-01-01T08:00:00+00:00"
	assert open_time(175,200,"2017-01-01T00:00:00+00:00") == "2017-01-01T05:09:00+00:00"
	assert close_time(175,200,"2017-01-01T00:00:00+00:00") == "2017-01-01T11:40:00+00:00"
	assert open_time(205,200,"2017-01-01T00:00:00+00:00") == "2017-01-01T05:53:00+00:00"
	assert close_time(205,200,"2017-01-01T00:00:00+00:00") == "2017-01-01T13:30:00+00:00"

#Test example 2 in RUSA Brevet Control calculator page
def test_example_2():
	assert open_time(0,600,"2017-01-01T00:00:00+00:00") == "2017-01-01T00:00:00+00:00"
	assert close_time(0,600,"2017-01-01T00:00:00+00:00") == "2017-01-01T01:00:00+00:00"
	assert open_time(100,600,"2017-01-01T00:00:00+00:00") == "2017-01-01T02:56:00+00:00"
	assert close_time(100,600,"2017-01-01T00:00:00+00:00") == "2017-01-01T06:40:00+00:00"
	assert open_time(200,600,"2017-01-01T00:00:00+00:00") == "2017-01-01T05:53:00+00:00"
	assert close_time(200,600,"2017-01-01T00:00:00+00:00") == "2017-01-01T13:20:00+00:00"
	assert open_time(350,600,"2017-01-01T00:00:00+00:00") == "2017-01-01T10:34:00+00:00"
	assert close_time(350,600,"2017-01-01T00:00:00+00:00") == "2017-01-01T23:20:00+00:00"
	assert open_time(550,600,"2017-01-01T00:00:00+00:00") == "2017-01-01T17:08:00+00:00"
	assert close_time(550,600,"2017-01-01T00:00:00+00:00") == "2017-01-02T12:40:00+00:00"
	assert open_time(609,600,"2017-01-01T00:00:00+00:00") == "2017-01-01T18:48:00+00:00"
	assert close_time(609,600,"2017-01-01T00:00:00+00:00") == "2017-01-02T16:00:00+00:00"

#Test example 3 in RUSA Brevet Control calculator page
def test_example_3():
    assert open_time(890,1000,"2017-01-01T00:00:00+00:00") == "2017-01-02T05:09:00+00:00"
    assert close_time(890,1000,"2017-01-01T00:00:00+00:00") == "2017-01-03T17:23:00+00:00"
